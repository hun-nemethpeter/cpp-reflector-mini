class Player
{
  public:
    int id;
    std::string name;
};

static_assert(Player.class.fields.size() == 2, "");

template<typename T>
void printClassName()
{
  std::cout << ..."T.class.name()]"... << std::endl;
}

template<typename T>
class ClassNameAsMember
{
  int ...T.class.name()...;
};

// instatize:
// ClassNameAsMember<Player>;
//
// result:
// class ClassNameAsMember<Player>
// {
//    int Player;
// };

template<typename T>
class MirrorClass()
{
  for <member : T.class.members()>
  {
    ...member.type()... ...member.name()...;
  }
}
